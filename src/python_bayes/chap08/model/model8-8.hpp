// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model8_8_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 48> locations_array__ =
  {" (found before start of program)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 14, column 2 to column 19)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 15, column 2 to column 21)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 16, column 2 to column 21)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 17, column 2 to column 20)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 18, column 2 to column 20)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 22, column 2 to column 21)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 23, column 2 to column 21)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 24, column 2 to column 21)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 25, column 2 to column 19)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 26, column 2 to column 19)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 28, column 4 to column 48)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 27, column 2 to line 28, column 48)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 30, column 4 to column 20)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 29, column 2 to line 30, column 20)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 32, column 4 to column 23)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 33, column 4 to column 53)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 34, column 4 to column 27)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 31, column 17 to line 35, column 3)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 31, column 2 to line 35, column 3)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 40, column 4 to column 28)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 39, column 2 to line 40, column 28)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 42, column 4 to column 28)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 41, column 2 to line 42, column 28)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 44, column 4 to column 27)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 43, column 2 to line 44, column 27)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 2, column 2 to column 8)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 3, column 2 to column 8)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 4, column 2 to column 8)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 5, column 9 to column 10)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 5, column 2 to column 36)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 6, column 9 to column 10)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 6, column 2 to column 41)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 7, column 9 to column 10)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 7, column 2 to column 38)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 8, column 9 to column 10)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 8, column 2 to column 38)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 9, column 9 to column 10)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 9, column 2 to column 37)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 10, column 9 to column 10)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 10, column 2 to column 36)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 15, column 9 to column 10)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 16, column 9 to column 10)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 22, column 9 to column 10)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 23, column 9 to column 10)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 24, column 9 to column 10)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 25, column 9 to column 10)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap08/model/model8-8.stan', line 26, column 9 to column 10)"};
class model8_8_model final : public model_base_crtp<model8_8_model> {
 private:
  int N;
  int C;
  int I;
  std::vector<int> A;
  std::vector<double> Score;
  std::vector<int> PID;
  std::vector<int> CID;
  std::vector<double> W;
  std::vector<int> Y;
 public:
  ~model8_8_model() {}
  model8_8_model(stan::io::var_context& context__, unsigned int
                 random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model8_8_model_namespace::model8_8_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 26;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 26;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 27;
      context__.validate_dims("data initialization", "C", "int",
        std::vector<size_t>{});
      C = std::numeric_limits<int>::min();
      current_statement__ = 27;
      C = context__.vals_i("C")[(1 - 1)];
      current_statement__ = 28;
      context__.validate_dims("data initialization", "I", "int",
        std::vector<size_t>{});
      I = std::numeric_limits<int>::min();
      current_statement__ = 28;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 29;
      stan::math::validate_non_negative_index("A", "N", N);
      current_statement__ = 30;
      context__.validate_dims("data initialization", "A", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      A = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 30;
      A = context__.vals_i("A");
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "A", A, 0);
      current_statement__ = 30;
      stan::math::check_less_or_equal(function__, "A", A, 1);
      current_statement__ = 31;
      stan::math::validate_non_negative_index("Score", "N", N);
      current_statement__ = 32;
      context__.validate_dims("data initialization", "Score", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      Score = std::vector<double>(N,
                std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 32;
      Score = context__.vals_r("Score");
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "Score", Score, 0);
      current_statement__ = 32;
      stan::math::check_less_or_equal(function__, "Score", Score, 1);
      current_statement__ = 33;
      stan::math::validate_non_negative_index("PID", "I", I);
      current_statement__ = 34;
      context__.validate_dims("data initialization", "PID", "int",
        std::vector<size_t>{static_cast<size_t>(I)});
      PID = std::vector<int>(I, std::numeric_limits<int>::min());
      current_statement__ = 34;
      PID = context__.vals_i("PID");
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "PID", PID, 1);
      current_statement__ = 34;
      stan::math::check_less_or_equal(function__, "PID", PID, N);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("CID", "I", I);
      current_statement__ = 36;
      context__.validate_dims("data initialization", "CID", "int",
        std::vector<size_t>{static_cast<size_t>(I)});
      CID = std::vector<int>(I, std::numeric_limits<int>::min());
      current_statement__ = 36;
      CID = context__.vals_i("CID");
      current_statement__ = 36;
      stan::math::check_greater_or_equal(function__, "CID", CID, 1);
      current_statement__ = 36;
      stan::math::check_less_or_equal(function__, "CID", CID, C);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("W", "I", I);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "W", "double",
        std::vector<size_t>{static_cast<size_t>(I)});
      W = std::vector<double>(I, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 38;
      W = context__.vals_r("W");
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "W", W, 0);
      current_statement__ = 38;
      stan::math::check_less_or_equal(function__, "W", W, 1);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("Y", "I", I);
      current_statement__ = 40;
      context__.validate_dims("data initialization", "Y", "int",
        std::vector<size_t>{static_cast<size_t>(I)});
      Y = std::vector<int>(I, std::numeric_limits<int>::min());
      current_statement__ = 40;
      Y = context__.vals_i("Y");
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "Y", Y, 0);
      current_statement__ = 40;
      stan::math::check_less_or_equal(function__, "Y", Y, 1);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("b_P", "N", N);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("b_C", "C", C);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("x_P", "N", N);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("x_C", "C", C);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("x_J", "I", I);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("x", "I", I);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("q", "I", I);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 4 + N + C + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model8_8_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --filename-in-msg=model8-8.stan"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model8_8_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> b =
        std::vector<local_scalar_t__>(4, DUMMY_VAR__);
      current_statement__ = 1;
      b = in__.template read<std::vector<local_scalar_t__>>(4);
      std::vector<local_scalar_t__> b_P =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 2;
      b_P = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<local_scalar_t__> b_C =
        std::vector<local_scalar_t__>(C, DUMMY_VAR__);
      current_statement__ = 3;
      b_C = in__.template read<std::vector<local_scalar_t__>>(C);
      local_scalar_t__ s_P = DUMMY_VAR__;
      current_statement__ = 4;
      s_P = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      local_scalar_t__ s_C = DUMMY_VAR__;
      current_statement__ = 5;
      s_C = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      std::vector<local_scalar_t__> x_P =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      std::vector<local_scalar_t__> x_C =
        std::vector<local_scalar_t__>(C, DUMMY_VAR__);
      std::vector<local_scalar_t__> x_J =
        std::vector<local_scalar_t__>(I, DUMMY_VAR__);
      std::vector<local_scalar_t__> x =
        std::vector<local_scalar_t__>(I, DUMMY_VAR__);
      std::vector<local_scalar_t__> q =
        std::vector<local_scalar_t__>(I, DUMMY_VAR__);
      current_statement__ = 12;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 11;
        stan::model::assign(x_P,
          (((stan::model::rvalue(b, "b", stan::model::index_uni(2)) *
          stan::model::rvalue(A, "A", stan::model::index_uni(n))) +
          (stan::model::rvalue(b, "b", stan::model::index_uni(3)) *
          stan::model::rvalue(Score, "Score", stan::model::index_uni(n)))) +
          stan::model::rvalue(b_P, "b_P", stan::model::index_uni(n))),
          "assigning variable x_P", stan::model::index_uni(n));
      }
      current_statement__ = 14;
      for (int c = 1; c <= C; ++c) {
        current_statement__ = 13;
        stan::model::assign(x_C,
          stan::model::rvalue(b_C, "b_C", stan::model::index_uni(c)),
          "assigning variable x_C", stan::model::index_uni(c));
      }
      current_statement__ = 19;
      for (int i = 1; i <= I; ++i) {
        current_statement__ = 15;
        stan::model::assign(x_J,
          (stan::model::rvalue(b, "b", stan::model::index_uni(4)) *
          stan::model::rvalue(W, "W", stan::model::index_uni(i))),
          "assigning variable x_J", stan::model::index_uni(i));
        current_statement__ = 16;
        stan::model::assign(x,
          (((stan::model::rvalue(b, "b", stan::model::index_uni(1)) +
          stan::model::rvalue(x_P, "x_P",
            stan::model::index_uni(
              stan::model::rvalue(PID, "PID", stan::model::index_uni(i))))) +
          stan::model::rvalue(x_C, "x_C",
            stan::model::index_uni(
              stan::model::rvalue(CID, "CID", stan::model::index_uni(i))))) +
          stan::model::rvalue(x_J, "x_J", stan::model::index_uni(i))),
          "assigning variable x", stan::model::index_uni(i));
        current_statement__ = 17;
        stan::model::assign(q,
          stan::math::inv_logit(
            stan::model::rvalue(x, "x", stan::model::index_uni(i))),
          "assigning variable q", stan::model::index_uni(i));
      }
      {
        current_statement__ = 21;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 20;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(b_P, "b_P",
                             stan::model::index_uni(n)), 0, s_P));
        }
        current_statement__ = 23;
        for (int c = 1; c <= C; ++c) {
          current_statement__ = 22;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(b_C, "b_C",
                             stan::model::index_uni(c)), 0, s_C));
        }
        current_statement__ = 25;
        for (int i = 1; i <= I; ++i) {
          current_statement__ = 24;
          lp_accum__.add(stan::math::bernoulli_lpmf<propto__>(
                           stan::model::rvalue(Y, "Y",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(q, "q",
                             stan::model::index_uni(i))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model8_8_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> b =
        std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      b = in__.template read<std::vector<local_scalar_t__>>(4);
      std::vector<double> b_P =
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      b_P = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<double> b_C =
        std::vector<double>(C, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      b_C = in__.template read<std::vector<local_scalar_t__>>(C);
      double s_P = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      s_P = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      double s_C = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      s_C = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      std::vector<double> x_P =
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> x_C =
        std::vector<double>(C, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> x_J =
        std::vector<double>(I, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> x =
        std::vector<double>(I, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> q =
        std::vector<double>(I, std::numeric_limits<double>::quiet_NaN());
      out__.write(b);
      out__.write(b_P);
      out__.write(b_C);
      out__.write(s_P);
      out__.write(s_C);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 12;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 11;
        stan::model::assign(x_P,
          (((stan::model::rvalue(b, "b", stan::model::index_uni(2)) *
          stan::model::rvalue(A, "A", stan::model::index_uni(n))) +
          (stan::model::rvalue(b, "b", stan::model::index_uni(3)) *
          stan::model::rvalue(Score, "Score", stan::model::index_uni(n)))) +
          stan::model::rvalue(b_P, "b_P", stan::model::index_uni(n))),
          "assigning variable x_P", stan::model::index_uni(n));
      }
      current_statement__ = 14;
      for (int c = 1; c <= C; ++c) {
        current_statement__ = 13;
        stan::model::assign(x_C,
          stan::model::rvalue(b_C, "b_C", stan::model::index_uni(c)),
          "assigning variable x_C", stan::model::index_uni(c));
      }
      current_statement__ = 19;
      for (int i = 1; i <= I; ++i) {
        current_statement__ = 15;
        stan::model::assign(x_J,
          (stan::model::rvalue(b, "b", stan::model::index_uni(4)) *
          stan::model::rvalue(W, "W", stan::model::index_uni(i))),
          "assigning variable x_J", stan::model::index_uni(i));
        current_statement__ = 16;
        stan::model::assign(x,
          (((stan::model::rvalue(b, "b", stan::model::index_uni(1)) +
          stan::model::rvalue(x_P, "x_P",
            stan::model::index_uni(
              stan::model::rvalue(PID, "PID", stan::model::index_uni(i))))) +
          stan::model::rvalue(x_C, "x_C",
            stan::model::index_uni(
              stan::model::rvalue(CID, "CID", stan::model::index_uni(i))))) +
          stan::model::rvalue(x_J, "x_J", stan::model::index_uni(i))),
          "assigning variable x", stan::model::index_uni(i));
        current_statement__ = 17;
        stan::model::assign(q,
          stan::math::inv_logit(
            stan::model::rvalue(x, "x", stan::model::index_uni(i))),
          "assigning variable q", stan::model::index_uni(i));
      }
      if (emit_transformed_parameters__) {
        out__.write(x_P);
        out__.write(x_C);
        out__.write(x_J);
        out__.write(x);
        out__.write(q);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> b =
        std::vector<local_scalar_t__>(4, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(b, in__.read<std::vector<local_scalar_t__>>(4),
        "assigning variable b");
      out__.write(b);
      std::vector<local_scalar_t__> b_P =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(b_P, in__.read<std::vector<local_scalar_t__>>(N),
        "assigning variable b_P");
      out__.write(b_P);
      std::vector<local_scalar_t__> b_C =
        std::vector<local_scalar_t__>(C, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(b_C, in__.read<std::vector<local_scalar_t__>>(C),
        "assigning variable b_C");
      out__.write(b_C);
      local_scalar_t__ s_P = DUMMY_VAR__;
      current_statement__ = 4;
      s_P = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_P);
      local_scalar_t__ s_C = DUMMY_VAR__;
      current_statement__ = 5;
      s_C = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_C);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "b", "double",
        std::vector<size_t>{static_cast<size_t>(4)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "b_P", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "b_C", "double",
        std::vector<size_t>{static_cast<size_t>(C)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "s_P", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "s_C", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> b =
        std::vector<local_scalar_t__>(4, DUMMY_VAR__);
      current_statement__ = 1;
      b = context__.vals_r("b");
      out__.write(b);
      std::vector<local_scalar_t__> b_P =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 2;
      b_P = context__.vals_r("b_P");
      out__.write(b_P);
      std::vector<local_scalar_t__> b_C =
        std::vector<local_scalar_t__>(C, DUMMY_VAR__);
      current_statement__ = 3;
      b_C = context__.vals_r("b_C");
      out__.write(b_C);
      local_scalar_t__ s_P = DUMMY_VAR__;
      current_statement__ = 4;
      s_P = context__.vals_r("s_P")[(1 - 1)];
      out__.write_free_lb(0, s_P);
      local_scalar_t__ s_C = DUMMY_VAR__;
      current_statement__ = 5;
      s_C = context__.vals_r("s_C")[(1 - 1)];
      out__.write_free_lb(0, s_C);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"b", "b_P", "b_C", "s_P", "s_C"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"x_P", "x_C", "x_J", "x", "q"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(4)},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(C)},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(C)},
             std::vector<size_t>{static_cast<size_t>(I)},
             std::vector<size_t>{static_cast<size_t>(I)},
             std::vector<size_t>{static_cast<size_t>(I)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
      param_names__.emplace_back(std::string() + "b" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "b_P" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
      param_names__.emplace_back(std::string() + "b_C" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "s_P");
    param_names__.emplace_back(std::string() + "s_C");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "x_P" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        param_names__.emplace_back(std::string() + "x_C" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        param_names__.emplace_back(std::string() + "x_J" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        param_names__.emplace_back(std::string() + "x" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        param_names__.emplace_back(std::string() + "q" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
      param_names__.emplace_back(std::string() + "b" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "b_P" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
      param_names__.emplace_back(std::string() + "b_C" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "s_P");
    param_names__.emplace_back(std::string() + "s_C");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "x_P" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        param_names__.emplace_back(std::string() + "x_C" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        param_names__.emplace_back(std::string() + "x_J" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        param_names__.emplace_back(std::string() + "x" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        param_names__.emplace_back(std::string() + "q" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"b_P\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"b_C\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"s_P\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_C\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x_P\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"x_C\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"x_J\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"q\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"b_P\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"b_C\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"s_P\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_C\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x_P\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"x_C\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"x_J\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"q\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((4 + N) + C) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((N + C)
      + I) + I) + I));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((4 + N) + C) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((N + C)
      + I) + I) + I));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model8_8_model_namespace::model8_8_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model8_8_model_namespace::profiles__;
}
#endif