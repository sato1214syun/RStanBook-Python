// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model4_4_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 26> locations_array__ =
  {" (found before start of program)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 10, column 2 to column 9)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 11, column 2 to column 9)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 12, column 2 to column 22)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 16, column 2 to column 17)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 27, column 2 to column 25)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 28, column 2 to column 20)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 18, column 4 to column 27)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 17, column 2 to line 18, column 27)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 30, column 4 to column 35)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 31, column 4 to column 48)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 29, column 21 to line 32, column 3)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 29, column 2 to line 32, column 3)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 23, column 4 to column 36)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 22, column 2 to line 23, column 36)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 2, column 2 to column 8)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 3, column 9 to column 10)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 3, column 2 to column 12)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 4, column 9 to column 10)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 4, column 2 to column 12)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 5, column 2 to column 12)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 6, column 13 to column 18)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 6, column 2 to column 20)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 16, column 14 to column 15)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 27, column 18 to column 23)",
  " (in '/Users/sean/Documents/myscript/python-bayes/src/python_bayes/chap04/model/model4-4.stan', line 28, column 13 to column 18)"};
class model4_4_model final : public model_base_crtp<model4_4_model> {
 private:
  int N;
  std::vector<double> X;
  std::vector<double> Y;
  int N_new;
  std::vector<double> X_new;
 public:
  ~model4_4_model() {}
  model4_4_model(stan::io::var_context& context__, unsigned int
                 random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model4_4_model_namespace::model4_4_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 15;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 15;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 16;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 17;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      X = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 17;
      X = context__.vals_r("X");
      current_statement__ = 18;
      stan::math::validate_non_negative_index("Y", "N", N);
      current_statement__ = 19;
      context__.validate_dims("data initialization", "Y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      Y = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      Y = context__.vals_r("Y");
      current_statement__ = 20;
      context__.validate_dims("data initialization", "N_new", "int",
        std::vector<size_t>{});
      N_new = std::numeric_limits<int>::min();
      current_statement__ = 20;
      N_new = context__.vals_i("N_new")[(1 - 1)];
      current_statement__ = 21;
      stan::math::validate_non_negative_index("X_new", "N_new", N_new);
      current_statement__ = 22;
      context__.validate_dims("data initialization", "X_new", "double",
        std::vector<size_t>{static_cast<size_t>(N_new)});
      X_new = std::vector<double>(N_new,
                std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 22;
      X_new = context__.vals_r("X_new");
      current_statement__ = 23;
      stan::math::validate_non_negative_index("y_base", "N", N);
      current_statement__ = 24;
      stan::math::validate_non_negative_index("y_base_new", "N_new", N_new);
      current_statement__ = 25;
      stan::math::validate_non_negative_index("y_new", "N_new", N_new);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model4_4_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = "};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model4_4_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ a = DUMMY_VAR__;
      current_statement__ = 1;
      a = in__.template read<local_scalar_t__>();
      local_scalar_t__ b = DUMMY_VAR__;
      current_statement__ = 2;
      b = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      std::vector<local_scalar_t__> y_base =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 8;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 7;
        stan::model::assign(y_base, (a + (b *
          stan::model::rvalue(X, "X", stan::model::index_uni(n)))),
          "assigning variable y_base", stan::model::index_uni(n));
      }
      {
        current_statement__ = 14;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 13;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(Y, "Y",
                             stan::model::index_uni(n)),
                           stan::model::rvalue(y_base, "y_base",
                             stan::model::index_uni(n)), sigma));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model4_4_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      a = in__.template read<local_scalar_t__>();
      double b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      b = in__.template read<local_scalar_t__>();
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      std::vector<double> y_base =
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      out__.write(a);
      out__.write(b);
      out__.write(sigma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 8;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 7;
        stan::model::assign(y_base, (a + (b *
          stan::model::rvalue(X, "X", stan::model::index_uni(n)))),
          "assigning variable y_base", stan::model::index_uni(n));
      }
      if (emit_transformed_parameters__) {
        out__.write(y_base);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<double> y_base_new =
        std::vector<double>(N_new, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> y_new =
        std::vector<double>(N_new, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      for (int n = 1; n <= N_new; ++n) {
        current_statement__ = 9;
        stan::model::assign(y_base_new, (a + (b *
          stan::model::rvalue(X_new, "X_new", stan::model::index_uni(n)))),
          "assigning variable y_base_new", stan::model::index_uni(n));
        current_statement__ = 10;
        stan::model::assign(y_new,
          stan::math::normal_rng(
            stan::model::rvalue(y_base_new, "y_base_new",
              stan::model::index_uni(n)), sigma, base_rng__),
          "assigning variable y_new", stan::model::index_uni(n));
      }
      out__.write(y_base_new);
      out__.write(y_new);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ a = DUMMY_VAR__;
      current_statement__ = 1;
      a = in__.read<local_scalar_t__>();
      out__.write(a);
      local_scalar_t__ b = DUMMY_VAR__;
      current_statement__ = 2;
      b = in__.read<local_scalar_t__>();
      out__.write(b);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 3;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "a", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "b", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ a = DUMMY_VAR__;
      current_statement__ = 1;
      a = context__.vals_r("a")[(1 - 1)];
      out__.write(a);
      local_scalar_t__ b = DUMMY_VAR__;
      current_statement__ = 2;
      b = context__.vals_r("b")[(1 - 1)];
      out__.write(b);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 3;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"a", "b", "sigma"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"y_base"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"y_base_new", "y_new"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N_new)},
             std::vector<size_t>{static_cast<size_t>(N_new)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "a");
    param_names__.emplace_back(std::string() + "b");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_base" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_new; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_base_new" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_new; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_new" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "a");
    param_names__.emplace_back(std::string() + "b");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_base" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_new; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_base_new" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_new; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_new" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_base\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y_base_new\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_new) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_new\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_new) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_base\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y_base_new\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_new) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_new\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_new) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (N);
    const size_t num_gen_quantities = emit_generated_quantities * ((N_new +
      N_new));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (N);
    const size_t num_gen_quantities = emit_generated_quantities * ((N_new +
      N_new));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model4_4_model_namespace::model4_4_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model4_4_model_namespace::profiles__;
}
#endif